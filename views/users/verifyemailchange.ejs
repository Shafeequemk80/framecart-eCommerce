<%- include("../layouts/header.ejs") %>
<style>
    /* Add your custom styles here */
</style>
<div style="height: 100vh;width: auto;" class="container  d-flex justify-content-center align-items-center">
   
        <div class="position-relative col-4 border">
            <div class="card p-2 text-center">
                <h6 class="text-dark">
                 
                </h6>
                <div class="d-flex flex-row">
                    <span>A code has been sent to: <%=email%></span>
                </div>
               
                <div id="otp" class="inputs d-flex flex-row justify-content-center mt-2">
                    <input
                        class="m-2 text-center form-control rounded"
                        type="text"
                        id="first"
                        maxlength="6"
                        name="otp"
                    />
                </div>
                <div class="timeforotp d-flex justify-content-center">
                  <p class="small mb-2">OTP time ends in <span id="countdown">45</span>s</p>
                </div>
                <p class="text-danger"></p>
                <div>
                  <a href="javascript:void(0);" id="resend-otp" class="disabled mb-2" onclick="resendOTP()">Resend OTP</a>

                </div>
              
            
                    <button type="submit" class="btn btn-danger px-4 validate mb-2" onclick="validateOTP()">Validate</button>
                  </div>
                 
              </div>
        </div>

</div>
<%- include("../layouts/footer.ejs") %>
<script>
 // JavaScript to implement the countdown and button behavior
let countdown = 45;
const countdownElement = document.getElementById("countdown");
const resendButton = document.getElementById("resend-otp");

function updateCountdown() {
  countdownElement.textContent = countdown;
  if (countdown === 0) {
    // Enable the "Resend OTP" button when countdown reaches 0
    resendButton.classList.remove("disabled");
  
  }
  if (countdown > 0) {
    countdown--;
    setTimeout(updateCountdown, 1000);
  }
}

// Start the countdown
updateCountdown();

function validateOTP() {
  const otpInput = document.getElementById("first").value;

  // Make the fetch request to your server's OTP validation endpoint
  fetch("/verify_email_change", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      otp: otpInput,
    }),
  })
  
    .then((response) => {
        console.log(response);
      if (response.ok) {
        return response.json();
      } else {
        throw new Error(`Server responded with status ${response.status}`);
      }
    })
    .then((data) => {
        if (data.success) {
          Swal.fire({
           title: 'Email Change Successful!',
            icon: 'success',
             showConfirmButton: false,
              timer: 2000 // Adjust the timer (in milliseconds) as needed
            }).then(() => {
                window.location.href="/profile";
            });   
            
        }
        displayErrorMessage(data.message);
    })
    .catch((error) => {
      console.error("Error:", error.message);
      displayErrorMessage("An error occurred during OTP validation");
    });
}
function resendOTP() {

  const resendButton = document.getElementById("resend-otp");

  if (!resendButton.classList.contains("disabled")) {
   
    fetch("/resend-otp", {
      method: "GET",
    })
      .then((response) => {
     
        if (response.ok) {
          
          return response.json();
        } else {
          throw new Error(`Server responded with status ${response.status}`);
        }
      })
      .then((data) => {
       
        // Display the server response for debugging
        if (data.resendsuccess) {
           
          // Inform the user that resending was successful
          Swal.fire({
            icon: "success",
            title: "OTP Resent",
            text: "We've resent the OTP to your email.",
            position: "top",
            toast: true,
            showConfirmButton: false,
            timer: 3000, // Adjust the duration as needed
          }).then(() => {
                window.location.reload();
            }); 
          
          // Move the reload inside this block
          
        } else {
          Swal.fire({
              title: "Error!",
              text: "Resending failed",
              icon: "error",
              showConfirmButton: false,
                timer: 1500
            });
        }
      })
      .catch((error) => {
        console.error("Error:", error.message);
        Swal.fire({
              title: "Error!",
              icon: "error",
              showConfirmButton: false,
                timer: 1500
            });
      });
  }
}


function displayErrorMessage(message) {
  const errorContainer = document.querySelector(".text-danger");
  errorContainer.textContent = message;
}
</script>
